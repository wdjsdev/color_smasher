function colorSmasher (){    var appVersion = app.version;    if (appVersion < 18){        #target illustrator-17        }    else if (appVersion >= 18){        #target illustrator-18        }	if (app.documents.length > 0){		//Begin Functions		function inProgressIndicator(){			var aB = docRef.artboards[docRef.artboards.getActiveArtboardIndex()];			var height = aB.artboardRect[3] - aB.artboardRect[1];			var width = aB.artboardRect[2] - aB.artboardRect[0];		    var inProgText = layers[0].textFrames.add();		    inProgText.name = 'inProgress';		    inProgText.contents = 'IN PROGRESS';		    inProgText.width = width;		    inProgText.height = Math.abs(height);		    inProgText.left = 0;		    inProgText.top = 0;		    inProgText.locked = true;		}		function removeInProgressIndicator(){			var inProgText = layers[0].textFrames['inProgress'];			inProgText.locked = false;			inProgText.remove();		}		function turnOffPrinting(){			for (l=0; l<layers.length; l++){				layers[l].printable = false;			} // end for loop L		} // end function turnOffPrinting		function existInkLayer(index){			var inkLayer;			try {				inkLayer = layers.getByName("Ink Layer")				inkLayer.remove(); // this ensures that we start with a fresh, blank layer each time				inkLayer = layers.add();				inkLayer.name = "Ink Layer";				inkLayer.printable = true;//~ 				return inkLayer;				} // end try			catch(err) {				inkLayer = layers.add();				inkLayer.name = "Ink Layer";				inkLayer.printable = true;//~ 				return inkLayer;				} // end catch			docRef.selection = null;			artboards.setActiveArtboardIndex(index);			docRef.selectObjectsOnActiveArtboard();			for (c=0; c<docRef.selection.length; c++){				var currentSelection = docRef.selection[c];				currentSelection.duplicate(inkLayer, ElementPlacement.PLACEATEND);				} // end for loop C			redraw();			} // end function existCheckLayer				function writeInkList(index){			var inkList = docRef.inkList;			if(template){				var undesirable = ['jock tag b', 'thru-cut', 'info b', 'edge', 'cut line', 'cut', 'cutline', 'sewline', 'sew', 'sew line'];			}			else{				var undesirable = ['process cyan', 'process magenta', 'process yellow', 'process black', 'cut line', 'cut', 'edge', 'edge1', 'edge2', 'deleted global color',//                                    'deleted golbal color 1', 'deleted global color 2', 'deleted global color 3', 'deleted global color 4', 'deleted global color 5', //                                    'thru-cut', 'sew line', 'sewline', 'info b', 'jock tag b'];            }   						var thisList = [];			for (i=0; i<inkList.length; i++){				var thisInk = inkList[i]; 				if(thisInk.inkInfo.printingStatus == InkPrintStatus.ENABLEINK){					var pushColor = true;					for (u=0; u<undesirable.length; u++){						if (thisInk.name.toLowerCase() == undesirable[u]){							pushColor = false;							} // end if						} // end for loop U					if (pushColor == true){						thisList.push(thisInk.name);						} // end if					} // end if printing status enabled				} // end for loop I			return thisList;			} // end function writeInkList		function getLabelColor()		{			var valid = false;			try			{				var info = swatches["Info B"];				valid = true;			}			catch(e)			{				var info = docRef.spots.add();				info.name = "Info B";				var thisColor = new CMYKColor();				thisColor.cyan = 72;				thisColor.magenta = 67;				thisColor.yellow = 63;				thisColor.black = 72;				info.color = thisColor;				info.colorType = ColorModel.SPOT;			}			return info;		}				function makeColorChips(artboardSwatches, artboardIndex){			var aB = artboards[artboardIndex];			var aBRect = aB.artboardRect;			var x = aBRect[0] - 95;			var y = aBRect[3] + 60;			if (artboardSwatches.length > 0){				var chipGroup = layers[0].groupItems.add();				chipGroup.name = "Swatches for Artboard " + (artboardIndex+1);								////////////				//** This section deprecated 01.09.16				//** Replacing lightSwatch and darkSwatch with different tints of Info B rather than White B and Black B				//** Merging Black B or White B with another color prior to running script causes an error when trying to create the Black B swatch in the below blackLabel catch statement				//** Replacement found in getLabelColor() function;				////////////				// try {				// 	var lightSwatch = swatches.getByName("Black B").color;				// } // end try set light swatch text color				// catch (err) {				// 	var blackLabel = docRef.spots.add();				// 	blackLabelColor = new CMYKColor();				// 	blackLabelColor.cyan = 72;				// 	blackLabelColor.magenta = 67;				// 	blackLabelColor.yellow = 63;				// 	blackLabelColor.black = 72;				// 	blackLabel.name = "Black B";				// 	blackLabel.color = blackLabelColor;				// 	blackLabel.colorType = ColorModel.SPOT;				// 	blackLabel.tint = 100;				// 	lightSwatch = swatches.getByName("Black B").color;				// } // end catch				// try {				// 	darkSwatch = swatches.getByName("White B").color;				// } // end try set dark swatch text color				// catch (err) {				// 	whiteLabel = docRef.spots.add();				// 	whiteLabelColor = new CMYKColor();				// 	whiteLabelColor.cyan = 0;				// 	whiteLabelColor.magenta = 0;				// 	whiteLabelColor.yellow = 0;				// 	whiteLabelColor.black = 0;				// 	whiteLabel.name = "White B";				// 	whiteLabel.color = whiteLabelColor;				// 	whiteLabel.colorType = ColorModel.SPOT;				// 	whiteLabel.tint = 100;				// 	darkSwatch = swatches.getByName("White B").color;				// } // end catch 				for (m=0; m<artboardSwatches.length; m++){//~ 					$.writeln(artboardSwatches[m] + " artboard swatch [" + m + "]");					var currentSwatch = artboardSwatches[m];					var darkSwatches = ['black b', 'dark green b', 'maroon b', 'cardinal b', 'navy b', 'navy 2 b', 'royal blue b', 'brown b', 'dark charcoal b', 'purple b', 'kelly green b', 'columbia b', 'teal b']					var colorBox = chipGroup.pathItems.rectangle(y,x+=100, 100, 20);					var textBox = chipGroup.pathItems.rectangle(y-6, x+5, 90, 15);					var textRefBox = chipGroup.textFrames.areaText(textBox);					var useTextColor = lightSwatch;					textRefBox.contents = currentSwatch;					for (d=0; d<darkSwatches.length; d++){						if (currentSwatch.toLowerCase() == darkSwatches[d]){							textRefBox.textRange.fillColor = darkSwatch;							useTextColor = darkSwatch;						} // end if dark swatch					} // end for loop D					textRefBox.textRange.fillColor = useTextColor;					colorBox.stroked = false;					colorBox.filled = true;                       	try{                            colorBox.fillColor = swatches.getByName(currentSwatch).color;                        } // end try                       	catch(err){                           // alert("You need to update your swatches panel first. Undo and then try again.");                        } // end catch					if (currentSwatch == "White B"){						colorBox.stroked = true;						colorBox.strokeColor = swatches.getByName("Black B").color;					} // end if swatch is white				} // end for loop M								try{					var destLayer = layers.getByName("BKGRD, do not unlock");				}				catch(e){					var destLayer = layers[layers.length-1];				}				destLayer.locked = false;				destLayer.visible = true;				chipGroup.moveToBeginning(destLayer);				if(destLayer.name == "BKGRD, do not unlock"){					destLayer.locked = true;				}							try {					if (layers[0].name == "Ink Layer"){						layers[0].remove();					} // end if				} // end try				catch (err) {				} // end catch			} //end if artboardSwatches.length > 0		}  // end function makeColorChips				function turnOnPrinting(){			for (o=0; o<layers.length; o++){				layers[o].printable = true;				} // end for loop O			} // end function turnOnPrinting					function removeOldChips(){			try{				var theLayer = layers.getByName("BKGRD, do not unlock");			}			catch(e){				var theLayer = layers[layers.length-1];			}			theLayer.locked = false;			theLayer.visible = true;			for(var a=theLayer.groupItems.length-1;a>-1;a--){				var curGroup = theLayer.groupItems[a];				if (curGroup.name.substring(0,2) == "Sw"){					curGroup.remove();				}			}			if(template){				theLayer.locked = true;				theLayer.visible = false;			}		}		function testForScriptTemplate(){			var testTemplate = false;			for(var b=0;b<layers.length-1;b++){				var curLay = layers[b];				if (curLay.name.indexOf("FD")>-1){					testTemplate = true;					break;				}			}			if(testTemplate){				return true;			}			else if(!testTemplate){				return false;			}		}			// Begin Global Variables and main script			var docRef = app.activeDocument;	var layers = docRef.layers;	var swatches = docRef.swatches;	var artboards = docRef.artboards;	docRef.selection = null;	var template = testForScriptTemplate();	var labelColor = getLabelColor();	removeOldChips();	inProgressIndicator();	for (a=0; a< artboards.length; a++){		turnOffPrinting();		existInkLayer(a);		var artboardSwatches = (writeInkList(a));		// alert(artboardSwatches);		makeColorChips(artboardSwatches, a);		} // end for loop A	turnOnPrinting();	docRef.selection = null;	removeInProgressIndicator()	} // end if document exist	else {		alert("No Document Open");	} // end else} // end function colorSmashercolorSmasher(); // end script 